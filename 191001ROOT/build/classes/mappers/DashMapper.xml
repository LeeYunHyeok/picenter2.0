<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dashmapper">

	<select id="selectDashInfo" resultType="hashmap"> 
		SELECT A.TARGET_ID, A.NAME AS AGENT_NAME, B.AGENT_CONNECTED, B.AGENT_CONNECTED_IP,
      	DATE_FORMAT(FROM_UNIXTIME(A.SEARCH_TIME),'%Y-%m-%d %H:%i:%d') as AGENT_STARTED,
		B.AGENT_RAM, B.AGENT_CORES,
      	B.AGENT_PLATFORM_COMPATIBILITY
		FROM PI_TARGETS A, PI_AGENTS B
		WHERE A.NAME = B.AGENT_NAME
		AND A.TARGET_ID = #{target_id}
		ORDER BY AGENT_NAME
	</select>
	
	<select id="selectlastScanDate" resultType="hashmap"> 
		SELECT TARGET_ID, DATE_FORMAT(REGDATE, '%Y-%m-%d %H:%i:%S' ) AS REGDATE
		  FROM PI_TOPCOMP
		 WHERE TARGET_ID = #{target_id}
	  ORDER BY REGDATE DESC LIMIT 1,1
	</select>
	
	<!-- mybatis-config.xml의 typeAlias에 등록해두지 않았다면 <select id="selectMember" resultType="com.org.iopts.dto.MemberVO" > SELECT ID, PW ,NAME FROM TEST </select> 이렇게 해야 한다. -->
	<select id="selectDashMenu" resultType="com.org.iopts.dto.Pi_AgentVO">
		SELECT DISTINCT A.TARGET_ID, LOWER(A.NAME) AS AGENT_NAME, B.AGENT_CONNECTED_IP, B.AGENT_CONNECTED
		  FROM PI_TARGETS A, PI_AGENTS B, PI_TARGET_USER C
	     WHERE A.NAME = B.AGENT_NAME
		   AND A.TARGET_ID = C.TARGET_ID
	  ORDER BY AGENT_NAME
	</select>
	
	<!--  대시보드 메인차트 6개월 전, 1년 전 표기 --> 
	<select id="selectDatatypeAll" resultType="hashmap">
		SELECT B.DAYS, SUM(IFNULL(A.RRN,0)) AS TYPE1, SUM(IFNULL(A.FOREIGNER,0)) AS TYPE2, SUM(IFNULL(A.DRIVER,0)) AS TYPE4, SUM(IFNULL(A.PASSPORT,0)) AS TYPE3,
			   SUM(IFNULL(A.account_num,0)) AS TYPE5, SUM(IFNULL(A.card_num,0)) AS TYPE6, SUM(total) AS TOTALS
		  FROM (
				SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - DUMMY.IDX MONTH) , '%Y-%m') DAYS
				  FROM 
				  		(
						SELECT IDX FROM PI_DUMMY
						 WHERE IDX &lt; #{date}
						) DUMMY
				) B LEFT OUTER JOIN PI_TOPCOMP A ON DATE_FORMAT(A.REGDATE, '%Y-%m') = B.DAYS
		 GROUP BY B.DAYS
	</select>
	
	
	<!--  대시보드 메인차트 7일 전, 1개월 전, 3개월 전 표기 --> 
	<select id="selectDatatypeAll_day" resultType="hashmap">
		SELECT B.DAYS, SUM(IFNULL(A.RRN,0)) AS TYPE1, SUM(IFNULL(A.FOREIGNER,0)) AS TYPE2, SUM(IFNULL(A.PASSPORT,0)) AS TYPE3, SUM(IFNULL(A.DRIVER,0)) AS TYPE4,
			   SUM(IFNULL(A.account_num,0)) AS TYPE5, SUM(IFNULL(A.card_num,0)) AS TYPE6, SUM(total) AS TOTALS 
		  FROM (
				SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - DUMMY.IDX DAY) , '%Y-%m-%d') DAYS
				  FROM 
				  		(
						SELECT IDX FROM PI_DUMMY
						 WHERE IDX  &lt; #{date}
						) DUMMY
				) B LEFT OUTER JOIN PI_TOPCOMP A ON DATE_FORMAT(A.REGDATE, '%Y-%m-%d') = B.DAYS
		 GROUP BY B.DAYS
		 
		<!-- SELECT A.GROUP_ID, A.TARGET_ID, DATE_FORMAT(A.REGDATE, '%Y.%m.%d') AS REGDATE,
	    		SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'SOUTH KOREAN DRIVER LICENSE NUMBER') > 0 THEN B.MATCH_COUNT ELSE 0 END) AS TYPE4, 
		SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'SOUTH KOREAN FOREIGNER NUMBER') > 0 THEN B.MATCH_COUNT ELSE 0 END) AS TYPE2, 
		SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'SOUTH KOREAN PASSPORT') > 0 THEN B.MATCH_COUNT ELSE 0 END) AS TYPE3,
		SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'SOUTH KOREAN RRN') > 0 THEN B.MATCH_COUNT ELSE 0 END) AS TYPE1, 
		SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'ACCOUNT NUMBER') > 0 THEN B.MATCH_COUNT ELSE 0 END) AS TYPE5,
		
		SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'VISA') > 0 THEN B.MATCH_COUNT ELSE 0 END)
		+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'MAESTRO') > 0 THEN B.MATCH_COUNT ELSE 0 END)
		+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'PRIVATE LABEL CARD') > 0 THEN B.MATCH_COUNT ELSE 0 END)
		+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'DINERS CLUB') > 0 THEN B.MATCH_COUNT ELSE 0 END)
		+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'JCB') > 0 THEN B.MATCH_COUNT ELSE 0 END)
		+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'LASER') > 0 THEN B.MATCH_COUNT ELSE 0 END)
		+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'MASTERCARD') > 0 THEN B.MATCH_COUNT ELSE 0 END)
		+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'AMERICAN EXPRESS') > 0 THEN B.MATCH_COUNT ELSE 0 END) AS TYPE6,
		
		(SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'SOUTH KOREAN DRIVER LICENSE NUMBER') > 0 THEN B.MATCH_COUNT ELSE 0 END)
		+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'SOUTH KOREAN FOREIGNER NUMBER') > 0 THEN B.MATCH_COUNT ELSE 0 END)
		+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'SOUTH KOREAN PASSPORT') > 0 THEN B.MATCH_COUNT ELSE 0 END)
		+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'SOUTH KOREAN RRN') > 0 THEN B.MATCH_COUNT ELSE 0 END)
		+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'ACCOUNT NUMBER') > 0 THEN B.MATCH_COUNT ELSE 0 END) 

		+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'VISA') > 0 THEN B.MATCH_COUNT ELSE 0 END)
		+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'MAESTRO') > 0 THEN B.MATCH_COUNT ELSE 0 END)
		+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'PRIVATE LABEL CARD') > 0 THEN B.MATCH_COUNT ELSE 0 END)
		+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'DINERS CLUB') > 0 THEN B.MATCH_COUNT ELSE 0 END)
		+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'JCB') > 0 THEN B.MATCH_COUNT ELSE 0 END)
		+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'LASER') > 0 THEN B.MATCH_COUNT ELSE 0 END)
		+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'MASTERCARD') > 0 THEN B.MATCH_COUNT ELSE 0 END)
		+ SUM(CASE WHEN INSTR(UPPER(B.DATA_TYPE), 'AMERICAN EXPRESS') > 0 THEN B.MATCH_COUNT ELSE 0 END)) AS TOTAL,
	    
	    SUM(B.MATCH_COUNT) AS TOTALS
	    FROM PI_FIND A, PI_SUMMARY B, PI_USER C, PI_TARGET_USER D
	    WHERE B.OBJECT_ID = A.HASH_ID
	    AND B.TARGET_ID = A.TARGET_ID
	    AND B.GROUP_ID = A.GROUP_ID
	    AND D.TARGET_ID = A.TARGET_ID
	    AND C.USER_NO = D.USER_NO
	    AND C.USER_NO = #{user_id}
	    AND DATE_FORMAT(A.REGDATE, '%Y.%m.%d' ) >= DATE_FORMAT(SUBDATE(NOW(), INTERVAL #{date} DAY),'%Y.%m.%d')
	    GROUP BY DATE_FORMAT(A.REGDATE, '%Y.%m.%d' )
		ORDER BY A.REGDATE DESC -->
	</select>
	
	<select id="selectDatatype_days" resultType="hashmap">
		SELECT #{target_id}, B.DAYS, IFNULL(A.RRN, 0) AS TYPE1, IFNULL(A.FOREIGNER, 0) AS TYPE2, IFNULL(A.DRIVER, 0) AS TYPE4, IFNULL(A.PASSPORT, 0) AS TYPE3,
			   IFNULL(A.account_num, 0) AS TYPE5, IFNULL(A.card_num, 0) AS TYPE6, IFNULL(total, 0) AS TOTALS
		  FROM (
				SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - DUMMY.IDX DAY) , '%Y-%m-%d') DAYS
				  FROM 
				  		(
						SELECT IDX FROM PI_DUMMY
						 WHERE IDX &lt; #{date}
						) DUMMY
				) B LEFT OUTER JOIN PI_TOPCOMP A ON DATE_FORMAT(A.REGDATE, '%Y-%m-%d') = B.DAYS AND target_id = #{target_id}
	   GROUP BY B.DAYS
	</select>

	<select id="selectDatatype" resultType="hashmap">
		SELECT #{target_id}, B.DAYS, SUM(IFNULL(A.RRN,0)) AS TYPE1, SUM(IFNULL(A.FOREIGNER,0)) AS TYPE2, SUM(IFNULL(A.DRIVER,0)) AS TYPE4, SUM(IFNULL(A.PASSPORT,0)) AS TYPE3,
			   SUM(IFNULL(A.account_num,0)) AS TYPE5, SUM(IFNULL(A.card_num,0)) AS TYPE6, SUM(total) AS TOTALS
		  FROM (
				SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - DUMMY.IDX MONTH) , '%Y-%m') DAYS
				  FROM 
				  		(
						SELECT IDX FROM PI_DUMMY
						 WHERE IDX &lt; #{date}
						) DUMMY
				) B LEFT OUTER JOIN PI_TOPCOMP A ON DATE_FORMAT(A.REGDATE, '%Y-%m') = B.DAYS AND target_id = #{target_id}
		 GROUP BY B.DAYS
	</select>

	<select id="selectDatatypes" resultType="hashmap">
		SELECT DISTINCT A.target_id, A.regdate, B.NAME, C.AGENT_CONNECTED_IP AS IP, MAX(A.${datatype}) AS TYPE1
		  FROM pi_topcomp A, PI_TARGETS B, PI_AGENTS C, PI_TARGET_USER F
		 WHERE A.target_id = B.target_id
		   AND A.target_id = F.target_id
		   AND B.NAME = C.AGENT_NAME
		GROUP BY A.TARGET_ID
		ORDER BY ${datatype} DESC
		LIMIT 50
	</select>
	
	<select id="selectSystemCurrent" resultType="hashmap">
		SELECT COUNT(A.NAME) AS TOTAL,
		 	   COUNT(CASE WHEN A.SEARCH_STATUS = 'ERROR' THEN 1 END) AS ERROR,
		       COUNT(CASE WHEN A.SEARCH_STATUS = 'SEARCHED' THEN 1 END) AS SEARCHED, 
		       COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME = 0 THEN 1 END) AS WAIT,
			   COUNT(CASE WHEN A.SEARCH_STATUS = 'NONE' AND A.SEARCH_TIME != 0 AND A.MATCHCNT = 0 THEN 1 END) AS COMPLETE,
			   COUNT(CASE WHEN A.SEARCH_STATUS = 'AUTOMATICALLY PAUSED' THEN 1 END) AS PAUSE,
			   SUM(CASE WHEN B.AGENT_CONNECTED = 0 THEN 1 ELSE 0 END) AS NOTCONNECT
		  FROM PI_TARGETS A, PI_AGENTS B
		 WHERE A.NAME = B.AGENT_NAME
	</select>
	
	<select id="selectJumpUpHost" resultType="hashmap">
		SELECT A.TOTAL,
		       A.TOTAL_PRE,
		       IFNULL(A.TOTAL_GAP, 0) AS TOTAL_GAP,
				 A.TARGET_ID,
		       C.name
		  FROM PI_TOPCOMP A,
		       (SELECT IFNULL(MAX(TOTAL_GAP), 0) AS GAP,
		               TARGET_ID AS ID
		         FROM PI_TOPCOMP
		        GROUP BY TARGET_ID) B,
		        pi_targets AS C
		 WHERE A.TARGET_ID = B.ID
		   AND A.TARGET_ID = C.target_id
		   AND IFNULL(A.TOTAL_GAP, 0) = B.GAP
		 GROUP BY TARGET_ID
		 ORDER BY TOTAL_GAP DESC, TOTAL
	</select>
	
	
	
	
</mapper>